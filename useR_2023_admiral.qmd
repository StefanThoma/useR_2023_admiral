---
title: "Cross Industry Package Development"
subtitle: "A Newcomer's Perspective"
date: 21/07/2022
author: Stefan Thoma
title-slide-attributes: 
  data-background-color: "#F5F5F2"
format:
  revealjs: 
    theme: roche_template/roche.scss
    logo: roche_template/Roche_Logo_800px_Blue.png
---


::: {.notes}
Today, I would like to talk about Cross Industry R package development.

More specifically, I would like to discuss this from my personal perspective as a newcomer. 

So let me introduce myself quickly: 
I have a background in Psychology and Statistics, and joined Roche as an intern last September. 
This April I joined Roche permanently as an Analytical Data Scientist, AKA a statistical programmer.  

:::

# Context

-   Shift from SAS to R
  -   End-to-end solution is required
  
-   Cross-company development



::: {.notes}
<!-- We didn't like in SAS:  -->
<!-- - Each company buys their own custom solutions form vendors -->
<!-- - Even if a new hire is SAS proficient they need to learn company specific workflow and  -->
<!-- - Very specific solutions for specific problems, not modular -->
<!-- So, why did we want to change from SAS to R? -->
<!-- - people were not happy with the computing environment -->
<!-- - there are many different computing environments for different use cases -->
<!-- - in SAS, solutions are tailored to companies, so every company has their own solution -->
<!-- This is especially wasteful as most companies are basically doing the same thing.  -->

<!-- In that spirit, there are two aspects to this:  -->




First, we are switching to an overarching language agnostic computing environment
And we are developing at the moment within the open source programming language R.
We aim to have an end-to-end clinical data analysis pipeline in R

And second, the decision to collaborate with other companies to develop the solutions

:::

# Project

::::{.columns}
:::{.column width="40%"}
![](admiral.png)
:::

-   End-to-end solution under Pharmaverse
-   Admiral covers the transformation from SDTM to ADaM

:::{.column width="60%"}

-   Not a Roche product

:::

::::
::: {.notes}
talk two sentences what admiral does, and that its modular, etc. 

Emphasize that we do not see admiral as a 
:::


## Challenges at startup

-  Convince the company
    - Real problem needs to be solved, whats in it for the company? 
    - Already have some work done, e.g. partners or something solid
    - Ask for forgiveness, not for permission

-  Convince regulators

-  Convince other companies



::: {.notes}

One of the first products that was open source from the beginning. 

A lot of convincing was needed! 
To get a project properly started there needs to be approval from the higher ups. 
I have talked to several people involved and can reiterate what they told me: 
Most importantly, you have to able to explain whats in it for the company.

I believe this is a clear case: Roche is not a software development company, we develop drugs. 
We do not gain any competitive advantage by protecting our trial analysis software. 
Up to now, we paid a lot of money to buy SAS licenses and to have software developed for us. 
We want to work in R, why not share the developers cost?

And that is not the only advantage: 
You will want to use that code for submissions too, otherwise why write it. 
It is much easier to convince the FDA to accept your package or your workflow in R if the workflow is used across the industry. 

So what needed to be done: convince your peers! 






Tell story from Thomas Neitmann Roche & Marco Rimmler GSK
one team from the start


changes DS position from simply creating scripts one tiem to creating reusable software. 
Changes the ADS position to a more effective and more rewarding work, because there will be less repetition and more focus on writing better and reusable code.

:::

# Impact 
## For Roche { .scrollable}
::: {.incremental}
-  10 Devs for the price of 2
-  Seat at the table - shape the product
-  No total development control
:::
::: {.notes}
Speaker notes go here.
:::

## Attractive workplace 
::: {.incremental}
-  Use of R attracts talent
-  same language for stats and statistical programmers
-  Open source development means transparency and more ethical 
-  Less hierarchies in dev team (different companies)
-  Autonomous work - everyone can chose which issues they want to work
-  Expanding network across companies
-  Knowledge is more easily transferable to other positions
-  Leadership  opportunities outside of Corporation
-  Harder to get recognition, no manager present
:::
::: {.notes}
Surprised to learn that Roche is *investing* ito open source projects 



Recognition: That's why I have to make such a presentation... (joke)
:::



# Strategies
## Approach
::: {.incremental}

-   Act quickly: 
  -   Communicate early
  -   Open source early
    -   Focus on developing for general use
  -   Get many companies involved
    
-  Community involvement
    - Users help development
    - Can give feedback, create issues
    - Can join devs 
:::
::: {.notes}

The first thing is: Get the message out. 
You are already working on something? Or know that you will soon? 
Spread the message at conferences, you may get others involved at an early stage. 
With other companies involved, you will be less likely to create a package filling a company niche  and more likely to make a package that is more widely applicable. 
This, in turn, will more likely result in a broader adoption and in more resources of more companies in the medium turn. 

The earlier you start to open source, the less likely other companies have already solved the problem in house. 
This again increases the likelihood that they may join your project, as there is still room for other companies to have a seat at the table.

I think it is also a very good idea to keep the development team close to the end users. 
This will ensure that the end product is actually usable at the end. 
We ensure this by having developers on our team that also work as statistical programmers, plus we try to frequently engage with a broad group of statistical programmers. 
An example for that was the admiral hackathon last january, where we introduced the admiral workflow to hundreds of statistical programmers. 

:::

## Design { .scrollable}
::: {.incremental}
-  One `core` package 
    -  Plus package for therapeutic area 
    -  Plus internal company package
    
-  Consistent interface and design across all packages
    - Ensured via developers guide and CICD
    - Overlap of developers between packages

-  Modularity + templates for common / most more complex tasks

-  License is jointly owned
    - Admiral won't stop if one company exits
    - Monetisation of code not possible
    - Responsibility for maintanance
        - Package is never "done"
:::
::: {.notes}
Now lets outline some of the thoughts that went into the package: 

So first, the admiral package does not stand on its own. 
It is a core package which includes the most general functionalities. 
But there are currently x other therapeutic specific packages, 
namely admiralonco, admiralvaccines, and more. 
There, another dev team works on therapeutic specific implementations. 

There are also company specific extensions, for example, at roche we have admiralroche which includes company specific functions. 
This can for example override specific default settings of the more general admiral package or implement common challenges in proprietary data-sets that are not generally an issue. 

However, we try to keep all these packages consistent with each other. 
That means that all packages follow a certain design philosophy and nomenclature. 
We try to "enforce" this by having a public developers guide which lays bare the thoughts that went into the design, and how developers can best follow the practice. 
Commonalities are further ensured by having core package developers involved in the addon packages as well. 



Joint license means stability. Stability is needed if we want the industry to trust this and adopt / adapt this solution.

:::



# Development workflow

-   GitHub repository is the centerpiece
-   Every request / fix / improvement starts as an issue
-   Weekly stand-up meetings
  -   Check-in on progress
  -   Discuss priorities for current release
    -   Product lead (Roche) & technical lead (GSK)
  -   Assign issues from the backlog
  -   Strategy discussions


# Conclusion

Message: Benefits of developing open source packages across companies

Particularly attractive for new hires

::: {.notes}

:::


# {.last-slide }

Doing now what patients need next

# (ignore this slide) meeting notes

::: {.notes}

(These are just notes I took when meeting Ross)
Talk with Ross Farrugia

Collaboration: 
anyone could have done it separately -> many different packages eventually open sourced
___ start early to collaborate together! 
companies coming up to be listed as contributors, what do they need to do? 
makes comapnies more attractive



-> removes hierarchies: resources 50 50 with gsk: collaboration agreement
anyone can walk away any time. But everything done has to be open source
communicated already from the start, even though repo was private. 
after 6 months people test it from many different companies. 20 companies w/ 50 programmers - ~500 comments

roche and gsk own admiral core license

license means you need to maintain the package

do i talk about how roche wants to be distant from pharmaverse? 

challenge to have adjacent packages stay close to the core package

admiral dev defines package development strategies -> keeps packages close

how do we keep consistent with bigger pharmaverse? 

gordon is also in ophta admiral

people in core also check out and consult in the adjacent packages

core also makes reviews before release.

users will be used to admiral. will call out problems in any packages and make issues






:::
